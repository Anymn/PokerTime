@page "/create-poker-session"
@inherits MediatorComponent
@using Microsoft.Extensions.Logging
@using PokerTime.Application.Retrospectives.Commands.CreatePokerSession
@inject ILogger<CreatePokerSession> Logger

@if (ShowCompletionMessage)
{
    <section class="hero is-success">
        <div class="hero-body">
            <div class="container">
                <h1 class="title">
                    Success
                </h1>
                <h2 class="subtitle">
                    Your planning poker lobby has been created.
                </h2>
            </div>
        </div>
    </section>

    if (Result != null)
    {
        <p class="form-explanation">
            Please share the following URL and QR code with your team.
        </p>

        <div class="control">
            <input class="input" id="pokertime-location" type="text" readonly="readonly" value="@Result.Location">
        </div>

        <div>
            <p>
                <img src="@Result.QrCode.ToBase64()" class="pokertime-qrcode" />
            </p>
        </div>

        if (!String.IsNullOrEmpty(Model.Passphrase))
        {
            <p data-test-element-id="participator instructions">
                To enter the planning poker, the participants need to enter the following password: <code >@Model.Passphrase</code>.
            </p>
        }
        else
        {
            <p data-test-element-id="participator instructions">
                To enter the planning poker no password is required.
            </p>
        }

        <p data-test-element-id="facilitator instructions">
            To start the planning poker, you need to enter the following password: <code>@Model.FacilitatorPassphrase</code>.
        </p>

        <p>
            Have a good planning poker!
        </p>
    }
}
else
{
    <h1 class="title">Create a planning poker</h1>
    <h2 class="subtitle">To estimate your next moves</h2>

    <p class="form-explanation">
        Create a planning poker with the form below. After completion you will receive a url to share with your team members.
    </p>

    if (ShowErrorMessage)
    {
        <ErrorMessage Text="Something went wrong creating the planning poker. Please try again."/>
    }

    <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <Blazored.FluentValidation.FluentValidationValidator  />

        <div class="field">
            <label class="label" for="pokertime-title">Title</label>
            <div class="control">
                <InputText id="pokertime-title" class="input" type="text" @bind-Value="@Model.Title" placeholder="Give the planning poker a title" />
            </div>

            <ValidationMessage For="() => Model.Title"></ValidationMessage>
        </div>

        <div class="columns">
            <div class="column">
                <div class="field">
                    <label class="label" for="pokertime-facilitator-passphrase">Facilitator passphrase</label>
                    <div class="control">
                        <InputText id="pokertime-facilitator-passphrase" class="input" type="text" @bind-Value="@Model.FacilitatorPassphrase" placeholder="" />
                    </div>

                    <ValidationMessage For="() => Model.FacilitatorPassphrase"></ValidationMessage>
                    <p class="help">This is the password you need to start and control the progress of the planning poker.</p>
                </div>
            </div>
            <div class="column">
                <div class="field">
                    <label class="label" for="pokertime-passphrase">Participant passphrase</label>
                    <div class="control">
                        <InputText id="pokertime-passphrase" class="input" type="text" @bind-Value="@Model.Passphrase" placeholder="" />
                    </div>
                    <ValidationMessage For="() => Model.Passphrase"></ValidationMessage>
                    <p class="help">Optional passphrase required for participants to enter the lobby.</p>
                </div>
            </div>
        </div>

        <div class="field is-grouped">
            <div class="control">
                <button class="button is-link" id="create-pokertime-button">Submit</button>
            </div>
        </div>
    </EditForm>
}

@code {

#nullable disable

    Task HandleInvalidSubmit()
    {
        this.ShowErrorMessage = false;

        return Task.CompletedTask;
    }

    async Task HandleValidSubmit()
    {
        this.ShowErrorMessage = false;

        try
        {
            CreatePokerSessionCommandResponse response = await this.Mediator.Send(this.Model);

            this.Result = response;
            this.ShowCompletionMessage = true;
        }
        catch (Exception ex)
        {
            this.ShowErrorMessage = true;

            Logger.LogError(ex, "Error creating planning poker session");
        }
    }

    public CreatePokerSessionCommandResponse Result { get; set; }

    public bool ShowCompletionMessage;
    public bool ShowErrorMessage;

    [Parameter]
    public CreatePokerSessionCommand Model { get; set; } = new CreatePokerSessionCommand();
}