@inherits MediatorComponent
@using PokerTime.Application.Common.Models
@using PokerTime.Application.Sessions.Queries.GetSessionStatus
@using PokerTime.Application.Symbols.Queries

@if (this.SessionStatus == null)
{
    return;
}

@if (this.SessionStatus.IsStarted)
{
    @if (this.SessionStatus.UserStory != null)
    {
        <h2 class="title is-size-4">Estimation for: @(this.SessionStatus.UserStory.Title ?? "User story")</h2>
    }

    <CardChooser AvailableSymbols="@this.AvailableSymbols" />

    <EstimationOverview />
}
else
{
    <p data-test-element-id="wait-for-start-message">
        Please wait for the facilitator to start this session.
    </p>
}

@code {
#nullable disable

    [CascadingParameter]
    public SessionStatus SessionStatus { get; set; }

    // Cache the symbols at the parent level to prevent lengthy (in a relative sense) component initialization
    private ICollection<SymbolModel> AvailableSymbols { get; set; } = new List<SymbolModel>();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (this.AvailableSymbols.Count > 0)
        {
            return;
        }

        GetSymbolsQueryResponse response = await this.Mediator.Send(new GetSymbolsQuery(this.SessionStatus.SymbolSetId));
        this.AvailableSymbols = response.Symbols;
    }
}
