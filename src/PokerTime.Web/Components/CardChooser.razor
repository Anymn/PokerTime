@using Microsoft.Extensions.Logging
@using PokerTime.Application.Common.Models
@using PokerTime.Application.Poker.Commands
@using PokerTime.Application.Sessions.Queries.GetSessionStatus
@inherits MediatorComponent
@inject ILogger<CardChooser> Logger

@if (this.SessionStatus == null)
{
    return;
}

@if (this.ShowErrorMessage)
{
    <ErrorMessage Text="Something went wrong executing your command. Please try again." />
}

@if (this.SessionStatus.CanChooseCards)
{
    <h3 class="title is-size-5">Place your bets...</h3>
}
else
{
    <h3 class="title is-size-5">These are your cards...</h3>
}

<div>
    @foreach (SymbolModel cardSymbol in this.AvailableSymbols)
    {
        <div class="poker-card @(this.SessionStatus.CanChooseCards ? "poker-card--chooseable" : "poker-card--idle")"
             style="background-color: #@this.CurrentParticipant.HexColorString"
             @onclick="() => this.ChooseCard(cardSymbol)">
            <div class="poker-card__symbol">@cardSymbol.AsString</div>
        </div>
    }
</div>

@code {
#nullable disable

    [CascadingParameter]
    public SessionStatus SessionStatus { get; set; }

    [CascadingParameter]
    public CurrentParticipantModel CurrentParticipant { get; set; }

    [Parameter]
    public ICollection<SymbolModel> AvailableSymbols { get; set; } = new List<SymbolModel>(0);

    private bool ShowErrorMessage { get; set; }

    private async Task ChooseCard(SymbolModel symbol)
    {
        if (this.SessionStatus == null)
        {
            return;
        }

        if (!this.SessionStatus.CanChooseCards)
        {
            return;
        }

        try
        {
            this.ShowErrorMessage = false;
            await this.Mediator.Send(new PlayCardCommand(this.SessionStatus.UserStory?.Id ?? 0, symbol));
        }
        catch (Exception ex)
        {
            this.Logger.LogError(ex, $"Unable to choose card: {symbol.AsString}");

            this.ShowErrorMessage = true;
        }
    }
}
